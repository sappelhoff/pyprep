[metadata]
name = pyprep
url = https://github.com/sappelhoff/pyprep
author = pyprep developers
maintainer = Stefan Appelhoff
maintainer_email = stefan.appelhoff@mailbox.org
description = A Python implementation of the preprocessing pipeline (PREP) for EEG data.
long-description = file: README.rst
long-description-content-type = text/x-rst; charset=UTF-8
keywords = EEG artifact preprocessing data
license = MIT
license_files = LICENSE
platforms = any
classifiers =
  Topic :: Scientific/Engineering
  Programming Language :: Python :: 3
  Intended Audience :: Science/Research
  Development Status :: 3 - Alpha
  License :: OSI Approved :: MIT License
  Operating System :: POSIX :: Linux
  Operating System :: Unix
  Operating System :: MacOS
  Operating System :: Microsoft :: Windows
project_urls =
  Documentation = https://pyprep.readthedocs.io/en/latest
  Bug Reports = https://github.com/sappelhoff/pyprep/issues
  Source = https://github.com/sappelhoff/pyprep

[options]
python_requires = >= 3.6
install_requires =
  numpy >= 1.14.1
  scipy >= 1.0.0
  statsmodels >= 0.8.0
  mne >= 0.20.0
  psutil >= 5.4.3
packages = find:
include_package_data = True

[options.packages.find]
exclude =
  tests

[bdist_wheel]
universal = true

[versioneer]
VCS = git
style = pep440
versionfile_source = pyprep/_version.py
versionfile_build = pyprep/_version.py
tag_prefix =
parentdir_prefix =

[flake8]
docstring-convention = numpy
# Recommend matching the black line length (default 88),
# rather than using the flake8 default of 79:
max-line-length = 88
extend-ignore =
  # See https://github.com/PyCQA/pycodestyle/issues/373
  E203
exclude =
  versioneer.py
  _version.py
  *docs/_build/*
  *docs/auto_examples/*
  *build/lib*
  examples/

[isort]
profile=black
skip_glob=examples/*

[coverage:run]
omit =
  # Do not include test script in coverage report
  *tests*
  setup.py
  pyprep/_version.py

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
  # Have to re-enable the standard pragma
  pragma: no cover

  # Don't complain if non-runnable code isn't run:
  if 0:
  if __name__ == .__main__.:
